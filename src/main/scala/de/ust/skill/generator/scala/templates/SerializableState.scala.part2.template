  /**
   * prints some debug information onto stdout
   */
  def dumpDebugInfo = {
    println("DEBUG INFO START")
    println(s"StringPool (${strings.size}):")
    for (i ← 1 to strings.stringPositions.size) {
      if (!strings.idMap.contains(i))
        print("lazy ⇒ ")
      println(getString(i))
    }
    strings.newStrings.foreach(println(_))
    println("")
    println("ReflectionPool:")
    pools.values.foreach(s ⇒ println(s.userType.getDeclaration))
    println("")
    println("StoragePools:")
    knownPools.foreach({ s ⇒
      println(s.name+": "+s.dynamicSize);
      println(s.iterator.map(_.asInstanceOf[KnownType].prettyString).mkString("  ", "\n  ", "\n"))
    })
    println("")

    println("DEBUG INFO END")
  }
}

object SerializableState {

  /**
   * Creates a new and empty serializable state.
   */
  def create(): SerializableState = {
    val result = new SerializableState;
    result.finishInitialization
    result
  }

  /**
   * Reads a skill file and turns it into a serializable state.
   */
  def read(target: Path): SerializableState = FileParser.read(target)
}