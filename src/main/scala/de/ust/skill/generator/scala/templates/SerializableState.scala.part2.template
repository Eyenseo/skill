  /**
   * prints some debug information onto stdout
   */
  def dumpDebugInfo = {
    println("DEBUG INFO START")
    println(s"StringPool (${strings.size}):")
    for (i ← 1 to strings.size) {
      if (!strings.idMap.contains(i))
        print("lazy ⇒ ")
      println(getString(i))
    }
    println("")
    println("ReflectionPool:")
    pools.values.foreach(s ⇒ println(s.userType.getDeclaration))
    println("")
    println("StoragePools:")
    knownPools.foreach({ s ⇒
      println(s.name+": "+s.length);
      println(s.iterator.map(_.asInstanceOf[KnownType].prettyString).mkString("  ", "\n  ", "\n"))
    })
    println("")

    println("DEBUG INFO END")
  }
}

object SerializableState {

  /**
   * Creates a new and empty serializable state.
   */
  def create(): SerializableState = {
    val result = new SerializableState;
    result.finishInitialization
    result
  }

  /**
   * Reads a skill file and turns it into a serializable state.
   */
  def read(target: Path): SerializableState = FileParser.read(target)

  /**
   *  encode a v64 value into a stream
   */
  def v64(v: Long): Array[Byte] = {
    // calculate effective size
    var size = 0;
    {
      var q = v;
      while (q != 0) {
        q >>>= 7;
        size += 1;
      }
    }
    if (0 == size) {
      val rval = new Array[Byte](1);
      rval(0) = 0;
      return rval;
    } else if (10 == size)
      size = 9;

    // split
    val rval = new Array[Byte](size);
    var count = 0;
    while (count < 8 && count < size - 1) {
      rval(count) = (v >> (7 * count)).asInstanceOf[Byte];
      rval(count) = (rval(count) | 0x80).asInstanceOf[Byte];
      count += 1;
    }
    rval(count) = (v >> (7 * count)).asInstanceOf[Byte];
    return rval;
  }

  def v64(in: Array[Byte]): Long = {
    var next = 0
    var count = 0
    var rval: Long = 0
    var r: Long = in(next)
    next += 1
    while (count < 8 && 0 != (r & 0x80)) {
      rval |= (r & 0x7f) << (7 * count);

      count += 1;
      r = in(next)
      next += 1
    }
    rval = (rval | (count match {
      case 8 ⇒ r
      case _ ⇒ (r & 0x7f)
    }) << (7 * count));

    return rval
  }
}