#! graphInterface
#
# This test is mostly equivalent to graph, but checks interfacing and subtyping
# capabilities of a generated binding.

@abstract
AbstractNode {
  set<ColoredNode> edges;
  map<Node, ColoredNode, Marker> map;
}

/** The property of being a colored Node */
interface ColoredNode : AbstractNode with Colored with Marker {
}

/** a graph of colored nodes */
Node : ColoredNode {
}

/** check that projection wont interfere with regular subtyping */
SubNode : Node {
  Marker f;
  Node n;
}

/** anything that has a color is colored */
interface Colored {
  string color;
}

/** check that abstract colors are in fact annotations */
ColorHolder {
  Colored anAnnotation;
  ColoredNode anAbstractNode;
}

/**
 * a marker interface intended to check propper multiple inheritance
 * translation
 */
interface Marker {
}
